// Skid-Buffer-Logik für Pipelines

module pip_skidbuff #( parameter DWIDTH=8)
                    (
                        input  clk,
                        input  rstn,                        
                        // upstream input & output
                        input  [DWIDTH-1:0] upstream_data,
                        input  upstream_valid, // valid-signal der stufe n-1 verundet mit stufeninternen validsignal 
                        output reg upstream_ready,
                        
                        // downstream input & output 
                        input  downstream_ready, // ready-signal der stufe n+1 verundet mit stufeninternen readysignal
                        output reg downstream_valid,
                        output reg [DWIDTH-1:0] downstream_data
                    );

    reg  [DWIDTH-1:0] data_buffer;
    reg  valid_buffer;

   
    // Verwaltung von Daten und Valid-Signalen
    always @(posedge clk)
        if(!rstn) begin
            downstream_valid   <= 0;
            data_buffer <= 0;
            valid_buffer  <= 0;
        // State = FLUSS
        end else begin
         if(downstream_ready) begin
                // Lade Data & Valid - output mit Werten aus den Puffern  
                if(!upstream_ready) begin
                    downstream_data    <= data_buffer;
                    downstream_valid   <= valid_buffer;
                    // leere Puffer
                    valid_buffer       <= 0;
                // Lade Data & Valid - output mit den Eingangswerten
                end else begin
                    downstream_data    <= upstream_data;
                    downstream_valid   <= upstream_valid;
                end
            // State = STAU
         end else begin
            // Lade Puffer  mit den Eingangswerten
            if(!valid_buffer && upstream_valid) begin
                data_buffer   <= upstream_data;
                valid_buffer  <= upstream_valid;
            end        
         end
        end
        
    // Ready-Signal für vorgelagerte Stufe und modulinterne Steuersignale
    always @(posedge clk)
        if(!rstn)
            upstream_ready    <= 1;
        else
            upstream_ready    <= downstream_ready; 

endmodule
