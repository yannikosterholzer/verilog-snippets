// Skidbuffer als Pipeline verkettet
module pipeline(
                input  wire        clk,
                input  wire        rstn,
                
                // Pipeline-Eingang (Stage 0)
                input  wire [7:0]  upstream_data0,
                input  wire        upstream_valid0,
                
                // Externe Ready-Signale für alle Stages um einen Stall der jeweiligen Stufe testen zu können
                input  wire        i_ready0,
                input  wire        i_ready1,
                input  wire        i_ready2,
                input  wire        i_ready3,
                
                // Pipeline-Ausgang (Stage 3)
                output wire [7:0]  downstream_data3,
                output wire        downstream_valid3,
                output wire        upstream_ready0
                );


    

    
    // Upstream-Signale für Stage 1-3
    wire [7:0] upstream_data1;
    wire [7:0] upstream_data2;
    wire [7:0] upstream_data3;
    
    wire       upstream_valid1;
    wire       upstream_valid2;
    wire       upstream_valid3;
    
    // Downstream-Signale für Stage 0-2
    wire [7:0] downstream_data0;
    wire [7:0] downstream_data1;
    wire [7:0] downstream_data2;
    
    wire       downstream_valid0;
    wire       downstream_valid1;
    wire       downstream_valid2;
    
    // Ready-Signale jeder Stage
    wire       upstream_ready0;
    wire       upstream_ready1;
    wire       upstream_ready2;
    wire       upstream_ready3;
    
    wire       downstream_ready0;
    wire       downstream_ready1;
    wire       downstream_ready2;
    wire       downstream_ready3;
    
    // Daten-Chain: Ausgabe jeder Stage → Eingang der nächsten
    assign upstream_data1  = downstream_data0;  // Stage 0 → Stage 1
    assign upstream_data2  = downstream_data1;  // Stage 1 → Stage 2
    assign upstream_data3  = downstream_data2;  // Stage 2 → Stage 3
    
    // Valid-Chain
    assign upstream_valid1 = downstream_valid0; // Stage 0 → Stage 1
    assign upstream_valid2 = downstream_valid1; // Stage 1 → Stage 2
    assign upstream_valid3 = downstream_valid2; // Stage 2 → Stage 3
    
    // Ready-Chain: jede Stage ACK nur, wenn nächste Stage AND externes i_ready
    assign downstream_ready0 = upstream_ready1 && i_ready0; // Stage 1 & extern 0
    assign downstream_ready1 = upstream_ready2 && i_ready1; // Stage 2 & extern 1
    assign downstream_ready2 = upstream_ready3 && i_ready2; // Stage 3 & extern 2
    assign downstream_ready3 = i_ready3;                    // nur extern 3

        
        
    
    // Stufe 0
    pip_skidbuff #(
        .DWIDTH(8)
    ) skidbuff0 (
        .clk                (clk),
        .rstn               (rstn),
        .upstream_data      (upstream_data0),
        .upstream_valid     (upstream_valid0),
        .upstream_ready     (upstream_ready0),
        .downstream_ready   (downstream_ready0),
        .downstream_valid   (downstream_valid0),
        .downstream_data    (downstream_data0)
    );
    
    // Stufe 1
    pip_skidbuff #(
        .DWIDTH(8)
    ) skidbuff1 (
        .clk                (clk),
        .rstn               (rstn),
        .upstream_data      (upstream_data1),
        .upstream_valid     (upstream_valid1),
        .upstream_ready     (upstream_ready1),
        .downstream_ready   (downstream_ready1),
        .downstream_valid   (downstream_valid1),
        .downstream_data    (downstream_data1)
    );
    
    // Stufe 2
    pip_skidbuff #(
        .DWIDTH(8)
    ) skidbuff2 (
        .clk                (clk),
        .rstn               (rstn),
        .upstream_data      (upstream_data2),
        .upstream_valid     (upstream_valid2),
        .upstream_ready     (upstream_ready2),
        .downstream_ready   (downstream_ready2),
        .downstream_valid   (downstream_valid2),
        .downstream_data    (downstream_data2)
    );
    
    // Stufe 3
    pip_skidbuff #(
        .DWIDTH(8)
    ) skidbuff3 (
        .clk                (clk),
        .rstn               (rstn),
        .upstream_data      (upstream_data3),
        .upstream_valid     (upstream_valid3),
        .upstream_ready     (upstream_ready3),
        .downstream_ready   (downstream_ready3),
        .downstream_valid   (downstream_valid3),
        .downstream_data    (downstream_data3)
    );
    
        
endmodule
